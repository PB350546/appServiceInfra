name: AppService Deployment Pipeline

trigger: none

parameters:
- name: environment
  displayName: 'Environment'
  type: string
  default: dev
  values:
  - dev
  - test
  - prod

# This parameter will override the value present in parameters file & can be helpful in case you need to create multiple webapps.
- name: webAppName
  displayName: 'Enter the webapp name'
  type: string
  default: teamRockstar-dev-app

variables:
- template: ../variables/${{ parameters.environment }}.vars.yaml

pool:
  vmImage: 'ubuntu-latest'

stages:
#####################################################################
# Stage : Infrastructure Validation
#####################################################################
- stage: InfraCodeValidation
# This stage validates the Bicep code against any sort of syntax error & performs a preview deploment without actual change.
# Jobs run in parallel by default, this can be changed by adding condition.
  jobs:
  - job: InfraValidationBicep
    displayName: Infra Validation Bicep - ${{ parameters.environment }}
    steps:
    - checkout: self
      clean: true
    
    # This task will perform linting of bicep and check for any syntax errors.      
    - task: AzureCLI@2
      name: LintingInfraBicep
      displayName: Linting Infra Bicep - ${{ parameters.environment }}
      inputs: 
        azureSubscription : ${{ variables.serviceConnectionName }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep build --file '$(Build.SourceDirectory)/Infra/templates/app-service.bicep'

    # This task will perform a dryrun deployment to check the authenticity of the code.    
    - task: AzureCLI@2
      name: RunDeploymentValidationInfraBicep
      displayName: Deployment validation Infra Bicep - ${{ parameters.environment }}
      inputs: 
        azureSubscription : ${{ variables.serviceConnectionName }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group validate \
          --resource-group ${{ variables.resourceGroupName }} \
          --template-file '$(Build.SourceDirectory)/Infra/templates/app-service.bicep' \
          --parameters '$(Build.SourceDirectory)/Infra/parameters/app-service.${{ parameters.environment }}.parameters.json'

#####################################################################
# Stage : Infrastructure Deployment
#####################################################################
- stage: InfraDeploymentBicep
# This stage deploys the resource bicep in the Azure Environment
  jobs:
  - job: InfraDeploymentBicep
    displayName: Infra Deployment Bicep - ${{ parameters.environment }}
    steps:
    - checkout: self
      clean: true

    # This task performs the actual deployment of App Service.
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: Deploy appservice - ${{ parameters.environment }}
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: ${{ variables.serviceConnectionName }}
        action: 'Create Or Update Resource Group'
        resourceGroupName: ${{ variables.resourceGroupName }}
        location: 'WestEurope' 
        templateLocation: 'Linked artifact'
        csmFile: '../templates/app-service.bicep' 
        csmParametersFile: '../parameters/app-service.${{ parameters.environment }}.parameters.json'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'resourceGroupDeploymentOutputs' # The bicep output will be passed on to the task output and can be used later in pipeline.
        overrideParameters: 'webAppName ${{ parameters.webAppName }}' # This will override the value present in parameters file

    # This task will convert the bicep outputs into pipeline variables.
    - powershell: |
        if (('$(resourceGroupDeploymentOutputs)').count -eq 0) {
          Exit 0
        }

        $outputs = ConvertFrom-Json '$(resourceGroupDeploymentOutputs)'
        foreach ($output in $outputs.PSObject.Properties) {
          Write-Host "register RGDO_$($output.Name) = $($output.Value.value)"
          Write-Host "##vso[task.setvariable variable=RGDO_$($output.Name)]$($output.Value.value)"
          Write-Host "##vso[task.setvariable variable=RGDO_$($output.Name);isOutput=true]$($output.Value.value)"
        }
      displayName: Turn Bicep Outputs into variables - ${{ parameters.environment }}
      name: outputBicepVariables
